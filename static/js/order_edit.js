// Generated by CoffeeScript 1.5.0

/*
  SYD Sales System
  @author: Bo Gao, [elivoa@gmail.com]
*/


(function() {
  var OrderEdit, OrderManageDetails;

  OrderEdit = (function() {

    function OrderEdit() {
      this.init();
    }

    OrderEdit.prototype.init = function() {
      var fn, t;
      fn = $.proxy(this.onProductBlur, this);
      $("body").on("blur", ".product-id", function() {});
      $("body").on("blur", '.product-id', fn);
      $("body").on("blur", '.quantity', fn);
      $("body").on("blur", '.price', fn);
      $("body").on("blur", '.pay', $.proxy(this.onPaidBlur, this));
      t = this;
      $('.product-line').each(function(idx, obj) {
        return t.calculateSum($(obj));
      });
      this.calculateTotal();
      this.calculateTotalQuantity();
      return 1;
    };

    OrderEdit.prototype.onProductBlur = function(e) {
      var productLine;
      productLine = $(e.target).parents(".product-line");
      this.calculateSum(productLine);
      this.calculateTotal();
      this.calculateTotalQuantity();
      return 1;
    };

    OrderEdit.prototype.onPaidBlur = function(e) {
      return this.calculatePriceCut();
    };

    OrderEdit.prototype.calculateSum = function(productLine) {
      var price, quantity, sumObj;
      sumObj = productLine.find('.sum');
      try {
        quantity = parseInt(productLine.find('.quantity').val());
        price = parseFloat(productLine.find('.price').val());
        if (isNaN(quantity) || isNaN(price)) {
          this.markError(sumObj);
        } else {
          this.markPass(sumObj, quantity * price);
        }
      } catch (error) {
        this.markError(sumObj);
        "And the error is: sum can't be calculated...";
      }
      return 1;
    };

    OrderEdit.prototype.calculatePriceCut = function() {
      var paid, priceCut, total;
      total = parseFloat($(".total-price").html());
      paid = parseInt($(".pay").val());
      priceCut = total - paid;
      this.markPass($('.price-cut-display'), priceCut);
      $('.price-cut').val(priceCut);
      return 1;
    };

    OrderEdit.prototype.calculateTotal = function() {
      var onError, total, totalPriceSpan;
      total = 0;
      onError = false;
      $('.product-line .sum').each(function(idx, obj) {
        var sum;
        sum = parseFloat($(obj).html());
        if (isNaN(sum)) {
          return onError = true;
        } else {
          return total += sum;
        }
      });
      totalPriceSpan = $('.total-price');
      if (onError) {
        this.markError(totalPriceSpan);
      } else {
        this.markPass(totalPriceSpan, total);
        $(".pay").val(total);
      }
      this.calculatePriceCut();
      return 1;
    };

    OrderEdit.prototype.calculateTotalQuantity = function() {
      var onError, totalQuantity, totalQuantitySpan;
      totalQuantity = 0;
      onError = false;
      $('.product-line .quantity').each(function(idx, obj) {
        var quantity;
        quantity = parseInt($(obj).val());
        if (isNaN(quantity)) {
          return onError = true;
        } else {
          return totalQuantity += quantity;
        }
      });
      totalQuantitySpan = $('.total-quantity');
      if (onError) {
        this.markError(totalQuantitySpan);
      } else {
        this.markPass(totalQuantitySpan, totalQuantity);
      }
      return 1;
    };

    OrderEdit.prototype.markError = function(obj) {
      obj.html("-.--");
      return obj.css('color', 'red');
    };

    OrderEdit.prototype.markPass = function(obj, price) {
      obj.html(price);
      return obj.css('color', 'green');
    };

    return OrderEdit;

  })();

  OrderManageDetails = (function() {

    function OrderManageDetails() {
      this.container = $('#product-line');
      this.register();
      this.onAdd;
    }

    OrderManageDetails.prototype.register = function() {
      var _;
      $('body').on("click", '.fn_delete_line', function(e) {
        e.preventDefault();
        if ($('.product-line').length > 1) {
          return $(e.target).parents('.product-line').detach();
        } else {
          return alert("You can't delete the last product.");
        }
      });
      _ = this;
      return $('.fn_add_line').on("click", function(e) {
        e.preventDefault();
        return _.AddLine(e);
      });
    };

    OrderManageDetails.prototype.AddLine = function(e) {
      var lastline, line, lines, newline;
      lastline = void 0;
      lines = $('.product-line');
      if (lines.length > 0) {
        line = $(lines[lines.length - 1]);
        newline = line.clone();
        newline.find('input').each(function(idx, obj) {
          $(obj).attr("value", "");
          return $(obj).val("");
        });
        newline.find('.sum').html("");
        newline.insertAfter(line);
        if (this.onAdd) {
          return this.onAdd(newline);
        }
      }
    };

    return OrderManageDetails;

  })();

  $(function() {
    var omd, sc;
    window['OrderEdit'] = new OrderEdit;
    sc = new window.SuggestControl({
      parentClass: ".product-line",
      triggerClass: ".product-trigger",
      hiddenClass: ".product-id",
      category: "product",
      onSelect: function(line, suggestion) {
        var productId, url;
        console.log(suggestion);
        productId = suggestion.data;
        url = "/api/product/" + productId;
        return $.getJSON(url, function(data) {
          console.log('ajax send...');
          console.log(data);
          if (data) {
            return $(line).find(".price").val(data.Price);
          }
        });
      }
    });
    sc.init();
    omd = new OrderManageDetails();
    return omd.onAdd = function(line) {
      console.log("----> register line");
      console.log(line);
      return sc.registerLine(line);
    };
  });

}).call(this);
