// Generated by CoffeeScript 1.5.0

/*
  SYD System
  @author: Bo Gao, [elivoa@gmail.com]
*/


(function() {
  var EditableTable;

  EditableTable = (function() {

    function EditableTable(containerId) {
      this.id = containerId;
      this.config = {
        mtContainer: ".mt-container",
        mtLine: ".mt-line",
        mtAddButton: ".mt-add",
        mtRemoveButton: ".mt-remove",
        mtInsertPlace: ".mt-insert-here",
        mtInsertDirection: "above"
      };
      this.onInit;
      this.onRemove;
      this.afterRemove;
      this.onRemoveLastLine = this.defaultRemoveLastLine;
      this.onNewline;
      this.registerEvent();
    }

    EditableTable.prototype.registerEvent = function() {
      var _;
      _ = this;
      $("#" + this.id + " " + this.config.mtAddButton).on("click", $.proxy(this.addline, this));
      return $("#" + this.id).on("click", this.config.mtRemoveButton, $.proxy(this.removeline, this));
    };

    EditableTable.prototype.addline = function(e) {
      var line, lines, newline;
      e.preventDefault();
      lines = $("#" + this.id + " " + this.config.mtLine);
      if (lines.length > 0) {
        line = $(lines[lines.length - 1]);
        newline = line.clone();
        newline.find('input').each(function(idx, obj) {
          $(obj).attr("value", "");
          return $(obj).val("");
        });
        if (this.onNewline) {
          this.onNewline(newline);
        }
        newline.insertAfter(line);
        if (this.onAdd) {
          return this.onAdd(newline);
        }
      }
    };

    EditableTable.prototype.removeline = function(e) {
      var line, nItems, shouldRemove;
      e.preventDefault();
      line = $(e.target).parents(this.config.mtLine);
      nItems = $("#" + this.id + " " + this.config.mtLine).length;
      if (this.onRemove) {
        this.onRemove(line);
      }
      shouldRemove = true;
      if (nItems === 1) {
        if (this.onRemoveLastLine) {
          shouldRemove = this.onRemoveLastLine(line);
        }
      }
      if (shouldRemove === true) {
        if (this.onRemove) {
          this.onRemove(line);
        }
        line.detach();
      }
      if (this.afterRemove) {
        return this.afterRemove(line);
      }
    };

    EditableTable.prototype.defaultRemoveLastLine = function(line) {
      return alert("You can't delete the last item!");
    };

    return EditableTable;

  })();

  window['EditableTable'] = EditableTable;

}).call(this);
